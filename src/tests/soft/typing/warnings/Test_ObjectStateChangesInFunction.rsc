module tests::soft::typing::warnings::Test_ObjectStateChangesInFunction

import lang::php::analysis::cfg::Label;
import soft::typing::php::elements::Identifier;
import soft::typing::php::constraints::ConstraintHelper;
import soft::typing::php::Utils::Analysis;
import tests::soft::typing::php::helper::Test_SetComparator;

import soft::typing::php::declarations::PublicDataTypes;

private loc localP=rootP+"Test_ObjectStateChangesInFunction";

test bool test_ObjectStateChange_Test1()
{
	fileTest="ObjectStateChange_Test1.php";
	exitEnvm=runAnalysis(localP,fileTest);

	expectInfo=
	<(
	  "changeState":(
	    lab(5):(
	      var("obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({String()})),
	              "A",
	              {}))}),
	      var("tmp"):typeSet({String()})
	    ),
	    lab(39):(
	      var("obj"):nullTypeRoot(),
	      var("tmp"):nullTypeRoot()
	    ),
	    lab(40):(
	      var("obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))}),
	      var("tmp"):typeSet({String()})
	    ),
	    lab(41):(
	      var("obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({String()})),
	              "A",
	              {}))}),
	      var("tmp"):nullTypeRoot()
	    ),
	    lab(10):(
	      var("obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))}),
	      var("tmp"):typeSet({String()})
	    )
	  ),
	  "ObjectStateChange_Test1.php":(
	    lab(20):(
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({String()})),
	              "A",
	              {}))})
	    ),
	    lab(23):(
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    ),
	    lab(28):(
	      var("expectFloat"):typeSet({Float()}),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    ),
	    lab(36):(
	      var("expectFloat"):typeSet({Float()}),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    ),
	    lab(37):(
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):nullTypeRoot()
	    ),
	    lab(38):(
	      var("expectFloat"):typeSet({Float()}),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    ),
	    lab(1):(
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):nullTypeRoot()
	    ),
	    lab(35):(
	      var("expectFloat"):typeSet({Float()}),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    ),
	    lab(12):(
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):nullTypeRoot()
	    ),
	    lab(15):(
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):nullTypeRoot()),
	              "A",
	              {}))})
	    )
	  )
	),(
	  "changeState":[],
	  "ObjectStateChange_Test1.php":[
	    usingVoidTypeForExpr("Computed typeSet for lab(23) has Void type."),
	    objChangedState("Object instance: var(confusing_obj) changed state in a func. or method body @ lab(23)."),
	    typeCoercionWarning("Possible Illegal Type Coercion @ lab(31). Got: Float(). Expected from: {String()}.")
	  ]
	)>;
	return assertEquals(<AppExitEnvms,AppWarnings>,expectInfo,"AppInfo","generate warnings");
}

test bool test_ObjectStateChange_Test2()
{
	//checks for a script where object
	//state changes within a nested function
	//call
	fileTest="ObjectStateChange_Test2.php";
	exitEnvm=runAnalysis(localP,fileTest);

	expectInfo=
	<(
	  "changeState":(
	    lab(53):(
	      var("obj"):nullTypeRoot(),
	      var("tmp"):nullTypeRoot()
	    ),
	    lab(54):(
	      var("obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))}),
	      var("tmp"):typeSet({String()})
	    ),
	    lab(55):(
	      var("obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({String()})),
	              "A",
	              {}))}),
	      var("tmp"):nullTypeRoot()
	    ),
	    lab(5):(
	      var("obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({String()})),
	              "A",
	              {}))}),
	      var("tmp"):typeSet({String()})
	    ),
	    lab(10):(
	      var("obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))}),
	      var("tmp"):typeSet({String()})
	    )
	  ),
	  "ObjectStateChange_Test2.php":(
	    lab(52):(
	      var("simple_obj"):typeSet({Object(
	            objHd(3),
	            objInst(
	              3,
	              (var("aVar"):typeSet({Bool()})),
	              "A",
	              {}))}),
	      var("expectFloat"):typeSet({Float()}),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    ),
	    lab(23):(
	      var("simple_obj"):typeSet({Object(
	            objHd(3),
	            objInst(
	              3,
	              (var("aVar"):nullTypeRoot()),
	              "A",
	              {}))}),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):nullTypeRoot()),
	              "A",
	              {}))})
	    ),
	    lab(16):(
	      var("simple_obj"):nullTypeRoot(),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):nullTypeRoot()
	    ),
	    lab(49):(
	      var("simple_obj"):typeSet({Object(
	            objHd(3),
	            objInst(
	              3,
	              (var("aVar"):typeSet({Bool()})),
	              "A",
	              {}))}),
	      var("expectFloat"):typeSet({Float()}),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    ),
	    lab(50):(
	      var("simple_obj"):typeSet({Object(
	            objHd(3),
	            objInst(
	              3,
	              (var("aVar"):typeSet({Bool()})),
	              "A",
	              {}))}),
	      var("expectFloat"):typeSet({Float()}),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    ),
	    lab(28):(
	      var("simple_obj"):typeSet({Object(
	            objHd(3),
	            objInst(
	              3,
	              (var("aVar"):nullTypeRoot()),
	              "A",
	              {}))}),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({String()})),
	              "A",
	              {}))})
	    ),
	    lab(37):(
	      var("simple_obj"):typeSet({Object(
	            objHd(3),
	            objInst(
	              3,
	              (var("aVar"):typeSet({Bool()})),
	              "A",
	              {}))}),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    ),
	    lab(12):(
	      var("simple_obj"):nullTypeRoot(),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):nullTypeRoot()
	    ),
	    lab(42):(
	      var("simple_obj"):typeSet({Object(
	            objHd(3),
	            objInst(
	              3,
	              (var("aVar"):typeSet({Bool()})),
	              "A",
	              {}))}),
	      var("expectFloat"):typeSet({Float()}),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    ),
	    lab(51):(
	      var("simple_obj"):nullTypeRoot(),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):nullTypeRoot()
	    ),
	    lab(19):(
	      var("simple_obj"):nullTypeRoot(),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):nullTypeRoot()),
	              "A",
	              {}))})
	    ),
	    lab(33):(
	      var("simple_obj"):typeSet({Object(
	            objHd(3),
	            objInst(
	              3,
	              (var("aVar"):typeSet({Bool()})),
	              "A",
	              {}))}),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({String()})),
	              "A",
	              {}))})
	    ),
	    lab(1):(
	      var("simple_obj"):nullTypeRoot(),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):nullTypeRoot()
	    )
	  ),
	  "facade":(
	    lab(56):(
	      var("obj1"):nullTypeRoot(),
	      var("obj2"):nullTypeRoot()
	    ),
	    lab(57):(
	      var("obj1"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))}),
	      var("obj2"):typeSet({Object(
	            objHd(3),
	            objInst(
	              3,
	              (var("aVar"):typeSet({Bool()})),
	              "A",
	              {}))})
	    ),
	    lab(58):(
	      var("obj1"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({String()})),
	              "A",
	              {}))}),
	      var("obj2"):nullTypeRoot()
	    ),
	    lab(59):(
	      var("obj1"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({String()})),
	              "A",
	              {}))}),
	      var("obj2"):typeSet({Object(
	            objHd(3),
	            objInst(
	              3,
	              (var("aVar"):typeSet({Bool()})),
	              "A",
	              {}))})
	    ),
	    lab(14):(
	      var("obj1"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))}),
	      var("obj2"):typeSet({Object(
	            objHd(3),
	            objInst(
	              3,
	              (var("aVar"):typeSet({Bool()})),
	              "A",
	              {}))})
	    )
	  )
	),(
	  "changeState":[],
	  "ObjectStateChange_Test2.php":[
	    usingVoidTypeForExpr("Computed typeSet for lab(37) has Void type."),
	    objChangedState("Object instance: var(confusing_obj) changed state in a func. or method body @ lab(37)."),
	    typeCoercionWarning("Possible Illegal Type Coercion @ lab(45). Got: Float(). Expected from: {String()}.")
	  ],
	  "facade":[
	    usingVoidTypeForExpr("Computed typeSet for lab(14) has Void type."),
	    objChangedState("Object instance: var(obj1) changed state in a func. or method body @ lab(14).")
	  ]
	)>;
	return assertEquals(<AppExitEnvms,AppWarnings>,expectInfo,"AppInfo","generate warnings");
}

test bool test_ObjectStateChange_Test3()
{
	//checks for a script where object
	//state changes within a nested function
	//call.
	//In this state, I will establish some
	//references to the object var. When that
	//obj changes state in a function call,
	//I want to see if the referencing vars
	//also receive the changes!!
	fileTest="ObjectStateChange_Test3.php";
	exitEnvm=runAnalysis(localP,fileTest);

	expectInfo=
	<(
	  "changeState":(
	    lab(5):(
	      var("obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({String()})),
	              "A",
	              {}))}),
	      var("tmp"):typeSet({String()})
	    ),
	    lab(44):(
	      var("obj"):nullTypeRoot(),
	      var("tmp"):nullTypeRoot()
	    ),
	    lab(45):(
	      var("obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))}),
	      var("tmp"):typeSet({String()})
	    ),
	    lab(46):(
	      var("obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({String()})),
	              "A",
	              {}))}),
	      var("tmp"):nullTypeRoot()
	    ),
	    lab(10):(
	      var("obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))}),
	      var("tmp"):typeSet({String()})
	    )
	  ),
	  "ObjectStateChange_Test3.php":(
	    lab(19):(
	      var("aliasing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):nullTypeRoot()),
	              "A",
	              {}))}),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):nullTypeRoot()),
	              "A",
	              {}))})
	    ),
	    lab(24):(
	      var("aliasing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({String()})),
	              "A",
	              {}))}),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({String()})),
	              "A",
	              {}))})
	    ),
	    lab(27):(
	      var("aliasing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))}),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    ),
	    lab(32):(
	      var("aliasing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))}),
	      var("expectFloat"):typeSet({Float()}),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    ),
	    lab(1):(
	      var("aliasing_obj"):nullTypeRoot(),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):nullTypeRoot()
	    ),
	    lab(12):(
	      var("aliasing_obj"):nullTypeRoot(),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):nullTypeRoot()
	    ),
	    lab(15):(
	      var("aliasing_obj"):nullTypeRoot(),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):nullTypeRoot()),
	              "A",
	              {}))})
	    ),
	    lab(40):(
	      var("aliasing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))}),
	      var("expectFloat"):typeSet({Float()}),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    ),
	    lab(41):(
	      var("aliasing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))}),
	      var("expectFloat"):typeSet({Float()}),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    ),
	    lab(42):(
	      var("aliasing_obj"):nullTypeRoot(),
	      var("expectFloat"):nullTypeRoot(),
	      var("confusing_obj"):nullTypeRoot()
	    ),
	    lab(43):(
	      var("aliasing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))}),
	      var("expectFloat"):typeSet({Float()}),
	      var("confusing_obj"):typeSet({Object(
	            objHd(2),
	            objInst(
	              2,
	              (var("aVar"):typeSet({Float()})),
	              "A",
	              {}))})
	    )
	  )
	),(
	  "changeState":[],
	  "ObjectStateChange_Test3.php":[
	    usingVoidTypeForExpr("Computed typeSet for lab(27) has Void type."),
	    objChangedState("Object instance: var(aliasing_obj) changed state in a func. or method body @ lab(27)."),
	    objChangedState("Object instance: var(confusing_obj) changed state in a func. or method body @ lab(27)."),
	    typeCoercionWarning("Possible Illegal Type Coercion @ lab(36). Got: Float(). Expected from: {String()}.")
	  ]
	)>;
	
	return assertEquals(<AppExitEnvms,AppWarnings>,expectInfo,"AppInfo","generate warnings");
}
	